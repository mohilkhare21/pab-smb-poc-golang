version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - ENV=development
      - DB_PROVIDER=firestore
      - FIRESTORE_PROJECT_ID=${FIRESTORE_PROJECT_ID}
      - AUTH_PROVIDER=auth0
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
    volumes:
      - ./backend:/app
      - /app/vendor
    depends_on:
      - postgres
    networks:
      - admin-portal-network
    restart: unless-stopped

  # PostgreSQL Database (Alternative to Firestore)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=admin_portal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - admin-portal-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - admin-portal-network
    restart: unless-stopped

  # Frontend (React) - Placeholder for future
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - REACT_APP_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - admin-portal-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - admin-portal-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  admin-portal-network:
    driver: bridge

